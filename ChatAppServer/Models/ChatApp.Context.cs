//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatAppServer.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChatAppModels : DbContext
    {
        public ChatAppModels()
            : base("name=ChatAppModels")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Conversation> Conversations { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Participant> Participants { get; set; }
    
        public virtual ObjectResult<Usp_GetAccountById_Result> Usp_GetAccountById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAccountById_Result>("Usp_GetAccountById", idParameter);
        }
    
        public virtual ObjectResult<Usp_GetAccountBySignInInfo_Result> Usp_GetAccountBySignInInfo(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAccountBySignInInfo_Result>("Usp_GetAccountBySignInInfo", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllMessageByConversationId_Result> Usp_GetAllMessageByConversationId(string conversationId)
        {
            var conversationIdParameter = conversationId != null ?
                new ObjectParameter("conversationId", conversationId) :
                new ObjectParameter("conversationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllMessageByConversationId_Result>("Usp_GetAllMessageByConversationId", conversationIdParameter);
        }
    
        public virtual ObjectResult<Usp_GetConversationsByUserId_Result> Usp_GetConversationsByUserId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetConversationsByUserId_Result>("Usp_GetConversationsByUserId", idParameter);
        }
    
        public virtual ObjectResult<Usp_GetMembersOfConversation_Result> Usp_GetMembersOfConversation(string conversationId)
        {
            var conversationIdParameter = conversationId != null ?
                new ObjectParameter("conversationId", conversationId) :
                new ObjectParameter("conversationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetMembersOfConversation_Result>("Usp_GetMembersOfConversation", conversationIdParameter);
        }
    
        public virtual ObjectResult<Usp_GetMessagesByConversationId_Result> Usp_GetMessagesByConversationId(string conversationId, Nullable<int> offset, Nullable<int> limit)
        {
            var conversationIdParameter = conversationId != null ?
                new ObjectParameter("conversationId", conversationId) :
                new ObjectParameter("conversationId", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetMessagesByConversationId_Result>("Usp_GetMessagesByConversationId", conversationIdParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<Usp_GetParticipantsByConversationId_Result> Usp_GetParticipantsByConversationId(string conversationId)
        {
            var conversationIdParameter = conversationId != null ?
                new ObjectParameter("conversationId", conversationId) :
                new ObjectParameter("conversationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetParticipantsByConversationId_Result>("Usp_GetParticipantsByConversationId", conversationIdParameter);
        }
    
        public virtual int Usp_InsertAccount(string email, string password, string firstName, string lastName)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertAccount", emailParameter, passwordParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int Usp_InsertConversation(string id, Nullable<int> creatorId, string avatar, string title)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var creatorIdParameter = creatorId.HasValue ?
                new ObjectParameter("creatorId", creatorId) :
                new ObjectParameter("creatorId", typeof(int));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("avatar", avatar) :
                new ObjectParameter("avatar", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertConversation", idParameter, creatorIdParameter, avatarParameter, titleParameter);
        }
    
        public virtual int Usp_InsertMessage(string id, string conversationId, Nullable<int> senderId, string content, string messageType, Nullable<System.DateTime> createdAt)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var conversationIdParameter = conversationId != null ?
                new ObjectParameter("conversationId", conversationId) :
                new ObjectParameter("conversationId", typeof(string));
    
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("senderId", senderId) :
                new ObjectParameter("senderId", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("content", content) :
                new ObjectParameter("content", typeof(string));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("messageType", messageType) :
                new ObjectParameter("messageType", typeof(string));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("createdAt", createdAt) :
                new ObjectParameter("createdAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertMessage", idParameter, conversationIdParameter, senderIdParameter, contentParameter, messageTypeParameter, createdAtParameter);
        }
    
        public virtual int Usp_InsertParticipant(Nullable<int> userId, string conversationId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var conversationIdParameter = conversationId != null ?
                new ObjectParameter("conversationId", conversationId) :
                new ObjectParameter("conversationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertParticipant", userIdParameter, conversationIdParameter);
        }
    
        public virtual ObjectResult<Usp_SearchAccountByEmailOrName_Result> Usp_SearchAccountByEmailOrName(string keyword)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_SearchAccountByEmailOrName_Result>("Usp_SearchAccountByEmailOrName", keywordParameter);
        }
    
        public virtual int Usp_UpdateAccount(Nullable<int> id, string email, string password, string firstName, string lastName, Nullable<System.DateTime> birthday, string avatar)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("birthday", birthday) :
                new ObjectParameter("birthday", typeof(System.DateTime));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("avatar", avatar) :
                new ObjectParameter("avatar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateAccount", idParameter, emailParameter, passwordParameter, firstNameParameter, lastNameParameter, birthdayParameter, avatarParameter);
        }
    }
}
